import { useState } from "react";
import Text from "../../../atoms/Text";
import Button from "../../../atoms/Button";
import Input from "../../../atoms/Input";
import MultiSelect from "../../../atoms/MultiSelect";
import Table from "../../../atoms/Table";
import Modal from "../../../atoms/Modal";
import Tabs from "../../../atoms/Tabs";
import Checkbox from "../../../atoms/Checkbox";
import {
  Search as SearchIcon,
  Plus,
  Edit,
  Trash2,
  CheckCircle,
  Eye,
} from "lucide-react";

// Entities and their capabilities
const ENTITIES_CAPABILITIES = [
  {
    entity: "Customer",
    capabilities: {
      new: false,
      copy: true,
      useMatch: false,
    },
  },
  {
    entity: "Sales order",
    capabilities: {
      new: false,
      copy: false,
      useMatch: false,
    },
  },
  {
    entity: "Spare Part",
    capabilities: {
      new: true,
      copy: false,
      useMatch: true,
    },
  },
  {
    entity: "Purchase order",
    capabilities: {
      new: false,
      copy: true,
      useMatch: false,
    },
  },
];

// Sample privileges data (would come from cr_dms_privileges table)
const AVAILABLE_PRIVILEGES = [
  {
    id: 1,
    value: "Customer_Basic_Access",
    label:
      "Customer_Basic_Access (Customer - General: Customer, Address; Commerce: Privacy)",
    privilegeName: "Customer_Basic_Access",
    entity: "Customer",
    sessionFieldLevels: {
      General: {
        Customer: "View",
        Address: "Edit",
        "Contact information": "View",
      },
      Commerce: {
        Privacy: "View",
        Receipt: "None",
      },
    },
  },
  {
    id: 2,
    value: "Customer_Full_Access",
    label:
      "Customer_Full_Access (Customer - General: Customer, Address; Invoice: Delivery)",
    privilegeName: "Customer_Full_Access",
    entity: "Customer",
    sessionFieldLevels: {
      General: {
        Customer: "Edit",
        Address: "Edit",
        "Contact information": "Edit",
      },
      "Invoice and delivery": {
        Delivery: "Edit",
        "E-Invoice": "View",
      },
    },
  },
  {
    id: 3,
    value: "SparePart_Limited",
    label:
      "SparePart_Limited (Spare Part - General: Administration; Purchase: Administration)",
    privilegeName: "SparePart_Limited",
    entity: "Spare Part",
    sessionFieldLevels: {
      General: {
        Administration: "View",
      },
      Purchase: {
        Administration: "Edit",
        "Item Quality": "View",
      },
    },
  },
  {
    id: 4,
    value: "Customer_Conflict_Test",
    label: "Customer_Conflict_Test (Customer - General: Address conflict test)",
    privilegeName: "Customer_Conflict_Test",
    entity: "Customer",
    sessionFieldLevels: {
      General: {
        Customer: "Edit",
        Address: "View", // This will conflict with Customer_Basic_Access (Edit)
        "Contact information": "Edit",
      },
      Commerce: {
        Privacy: "Edit", // This will conflict with Customer_Basic_Access (View)
      },
    },
  },
];

// Sample duties data
const SAMPLE_DUTIES = [
  {
    id: 1,
    dutyName: "Manage_Customer_Data",
    capabilities: {
      Customer: { new: false, copy: true, useMatch: false },
      "Sales order": { new: false, copy: false, useMatch: false },
    },
    privileges: ["Customer_Basic_Access", "Customer_Full_Access"],
    createdAt: "2025-01-15T12:00:00Z",
    updatedAt: "2025-01-15T12:00:00Z",
  },
  {
    id: 2,
    dutyName: "SparePart_Operations",
    capabilities: {
      "Spare Part": { new: true, copy: false, useMatch: true },
      "Purchase order": { new: false, copy: true, useMatch: false },
    },
    privileges: ["SparePart_Limited"],
    createdAt: "2025-01-15T12:30:00Z",
    updatedAt: "2025-01-15T12:30:00Z",
  },
];

const DutiesConfig = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [duties, setDuties] = useState(SAMPLE_DUTIES);
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingDuty, setEditingDuty] = useState(null);
  const [showValidateModal, setShowValidateModal] = useState(false);
  const [formData, setFormData] = useState({
    dutyName: "",
    capabilities: {},
    privileges: [],
  });
  const [errors, setErrors] = useState({});
  const [validationResult, setValidationResult] = useState(null);
  const [activeTab, setActiveTab] = useState("capabilities");
  const [showPreviewModal, setShowPreviewModal] = useState(false);

  // Filter duties based on search
  const filteredDuties = duties.filter((duty) => {
    const matchesSearch =
      duty.dutyName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      duty.privileges.some((privilege) =>
        privilege.toLowerCase().includes(searchTerm.toLowerCase())
      );

    return matchesSearch;
  });

  const handleAddDuty = () => {
    setEditingDuty(null);
    // Initialize capabilities with default values
    const initialCapabilities = {};
    ENTITIES_CAPABILITIES.forEach((entity) => {
      initialCapabilities[entity.entity] = { ...entity.capabilities };
    });

    setFormData({
      dutyName: "",
      capabilities: initialCapabilities,
      privileges: [],
    });
    setErrors({});
    setActiveTab("capabilities");
    setShowAddModal(true);
  };

  const handleEditDuty = (duty) => {
    setEditingDuty(duty);
    // Initialize capabilities with existing or default values
    const initialCapabilities = {};
    ENTITIES_CAPABILITIES.forEach((entity) => {
      initialCapabilities[entity.entity] = duty.capabilities?.[
        entity.entity
      ] || { ...entity.capabilities };
    });

    setFormData({
      dutyName: duty.dutyName,
      capabilities: initialCapabilities,
      privileges: duty.privileges,
    });
    setErrors({});
    setActiveTab("capabilities");
    setShowAddModal(true);
  };

  const handleDeleteDuty = (dutyId) => {
    if (window.confirm("Are you sure you want to delete this duty?")) {
      setDuties((prev) => prev.filter((duty) => duty.id !== dutyId));
    }
  };

  const handleCapabilityChange = (entity, capability, value) => {
    setFormData((prev) => ({
      ...prev,
      capabilities: {
        ...prev.capabilities,
        [entity]: {
          ...prev.capabilities[entity],
          [capability]: value,
        },
      },
    }));
  };

  const handleInputChange = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
    if (errors[field]) {
      setErrors((prev) => ({
        ...prev,
        [field]: "",
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.dutyName.trim()) {
      newErrors.dutyName = "Duty name is required";
    } else {
      // Check for duplicate duty name (excluding current editing duty)
      const isDuplicate = duties.some(
        (duty) =>
          duty.dutyName.toLowerCase() === formData.dutyName.toLowerCase() &&
          (!editingDuty || duty.id !== editingDuty.id)
      );
      if (isDuplicate) {
        newErrors.dutyName = "Duty name already exists. Try another.";
      }
    }

    if (!formData.privileges || formData.privileges.length === 0) {
      newErrors.privileges = "Duties must include at least one privilege.";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = () => {
    if (!validateForm()) return;

    const dutyData = {
      ...formData,
      updatedAt: new Date().toISOString(),
    };

    if (editingDuty) {
      setDuties((prev) =>
        prev.map((duty) =>
          duty.id === editingDuty.id ? { ...duty, ...dutyData } : duty
        )
      );
    } else {
      const newDuty = {
        id: Date.now(),
        ...dutyData,
        createdAt: new Date().toISOString(),
      };
      setDuties((prev) => [...prev, newDuty]);
    }

    setShowAddModal(false);
  };

  const handleValidate = () => {
    // Enhanced validation logic - check for conflicting privileges with detailed info
    const conflicts = [];
    const entitySessionFieldLevels = {};
    const privilegeTracker = {}; // Track which privilege set each field level

    formData.privileges.forEach((privilegeValue) => {
      const privilege = AVAILABLE_PRIVILEGES.find(
        (p) => p.value === privilegeValue
      );
      if (privilege) {
        const entityKey = privilege.entity;
        if (!entitySessionFieldLevels[entityKey]) {
          entitySessionFieldLevels[entityKey] = {};
          privilegeTracker[entityKey] = {};
        }

        // Check for conflicting session field levels
        Object.entries(privilege.sessionFieldLevels || {}).forEach(
          ([session, fields]) => {
            if (!entitySessionFieldLevels[entityKey][session]) {
              entitySessionFieldLevels[entityKey][session] = {};
              privilegeTracker[entityKey][session] = {};
            }

            Object.entries(fields).forEach(([field, level]) => {
              if (level !== "None") {
                const fieldKey = `${session}_${field}`;

                if (entitySessionFieldLevels[entityKey][session][field]) {
                  const existingLevel =
                    entitySessionFieldLevels[entityKey][session][field];
                  const existingPrivilege =
                    privilegeTracker[entityKey][session][field];

                  if (existingLevel !== level) {
                    conflicts.push({
                      entity: entityKey,
                      session: session,
                      field: field,
                      privilege1: existingPrivilege,
                      level1: existingLevel,
                      privilege2: privilege.privilegeName,
                      level2: level,
                      message: `Field "${field}" in session "${session}" (${entityKey}) has conflicting access levels:`,
                      detail: `• ${existingPrivilege}: ${existingLevel} access\n• ${privilege.privilegeName}: ${level} access`,
                    });
                  }
                } else {
                  entitySessionFieldLevels[entityKey][session][field] = level;
                  privilegeTracker[entityKey][session][field] =
                    privilege.privilegeName;
                }
              }
            });
          }
        );
      }
    });

    setValidationResult({
      isValid: conflicts.length === 0,
      conflicts: conflicts,
      message:
        conflicts.length === 0
          ? "No conflicts detected. All privileges are compatible and can be grouped together safely."
          : `${conflicts.length} conflict${
              conflicts.length > 1 ? "s" : ""
            } detected in duties configuration.`,
    });
    setShowValidateModal(true);
  };

  const getPrivilegesDisplay = (privileges) => {
    if (!privileges || privileges.length === 0) return "No privileges";
    return (
      privileges.slice(0, 2).join(", ") +
      (privileges.length > 2 ? ` +${privileges.length - 2} more` : "")
    );
  };

  const getCapabilitiesDisplay = (capabilities) => {
    if (!capabilities || Object.keys(capabilities).length === 0)
      return "No capabilities set";

    const activeCapabilities = [];
    Object.entries(capabilities).forEach(([entity, caps]) => {
      const activeCaps = Object.entries(caps)
        .filter(([cap, enabled]) => enabled)
        .map(([cap, enabled]) => cap);

      if (activeCaps.length > 0) {
        activeCapabilities.push(`${entity}: ${activeCaps.join(", ")}`);
      }
    });

    if (activeCapabilities.length === 0) return "All capabilities disabled";

    return (
      activeCapabilities.slice(0, 2).join("; ") +
      (activeCapabilities.length > 2
        ? ` +${activeCapabilities.length - 2} more`
        : "")
    );
  };

  const getEffectiveFieldAccess = () => {
    const effectiveAccess = {};

    formData.privileges.forEach((privilegeValue) => {
      const privilege = AVAILABLE_PRIVILEGES.find(
        (p) => p.value === privilegeValue
      );
      if (privilege) {
        const entityKey = privilege.entity;
        if (!effectiveAccess[entityKey]) {
          effectiveAccess[entityKey] = {};
        }

        Object.entries(privilege.sessionFieldLevels || {}).forEach(
          ([session, fields]) => {
            if (!effectiveAccess[entityKey][session]) {
              effectiveAccess[entityKey][session] = {};
            }

            Object.entries(fields).forEach(([field, level]) => {
              if (level !== "None") {
                // Use highest level (Edit > View > None)
                const currentLevel = effectiveAccess[entityKey][session][field];
                if (
                  !currentLevel ||
                  level === "Edit" ||
                  (level === "View" && currentLevel !== "Edit")
                ) {
                  effectiveAccess[entityKey][session][field] = level;
                }
              }
            });
          }
        );
      }
    });

    return effectiveAccess;
  };

  const getPrivilegeLabel = (privilegeValue) => {
    const privilege = AVAILABLE_PRIVILEGES.find(
      (p) => p.value === privilegeValue
    );
    return privilege ? privilege.label : privilegeValue;
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <Text variant="heading" size="lg" weight="semibold">
            Duties Configuration
          </Text>
          <Text variant="body" color="muted" className="mt-1">
            Configure duties by grouping privileges (Level 2)
          </Text>
        </div>
        <Button onClick={handleAddDuty}>
          <Plus size={16} className="mr-2" />
          Add Duty
        </Button>
      </div>

      {/* Search Filter */}
      <div className="bg-white border-gray-200">
        <div className="relative max-w-md">
          <SearchIcon
            size={20}
            className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"
          />
          <Input
            placeholder="Search duties..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
      </div>

      {/* Duties Table */}
      <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
        <Table>
          <Table.Header>
            <Table.Row>
              <Table.HeaderCell>Duty Name</Table.HeaderCell>
              <Table.HeaderCell>Capabilities</Table.HeaderCell>
              <Table.HeaderCell>Privileges</Table.HeaderCell>
              <Table.HeaderCell>Actions</Table.HeaderCell>
            </Table.Row>
          </Table.Header>
          <Table.Body>
            {filteredDuties.length === 0 ? (
              <Table.Row>
                <Table.Cell colSpan="4" className="text-center py-8">
                  <Text variant="body" color="muted">
                    {searchTerm
                      ? "No duties found matching your search"
                      : "No duties configured yet"}
                  </Text>
                </Table.Cell>
              </Table.Row>
            ) : (
              filteredDuties.map((duty) => (
                <Table.Row key={duty.id} className="hover:bg-gray-50">
                  <Table.Cell>
                    <Text variant="body" weight="medium">
                      {duty.dutyName}
                    </Text>
                  </Table.Cell>
                  <Table.Cell>
                    <Text variant="body" className="max-w-xs truncate">
                      {getCapabilitiesDisplay(duty.capabilities)}
                    </Text>
                  </Table.Cell>
                  <Table.Cell>
                    <Text variant="body" className="max-w-xs truncate">
                      {getPrivilegesDisplay(duty.privileges)}
                    </Text>
                  </Table.Cell>
                  <Table.Cell>
                    <div className="flex items-center gap-2">
                      <Button
                        variant="ghost"
                        size="small"
                        onClick={() => handleEditDuty(duty)}
                      >
                        <Edit size={16} />
                      </Button>
                      <Button
                        variant="ghost"
                        size="small"
                        onClick={() => handleDeleteDuty(duty.id)}
                      >
                        <Trash2 size={16} />
                      </Button>
                    </div>
                  </Table.Cell>
                </Table.Row>
              ))
            )}
          </Table.Body>
        </Table>
      </div>

      {/* Summary */}
      <div className="bg-gray-50 rounded-lg p-4">
        <Text variant="body" color="muted" className="text-sm">
          Showing {filteredDuties.length} of {duties.length} duties
        </Text>
      </div>

      {/* Add/Edit Duty Modal */}
      <Modal
        isOpen={showAddModal}
        onClose={() => setShowAddModal(false)}
        title={editingDuty ? "Edit Duty" : "Add New Duty"}
        size="large"
      >
        <div className="space-y-6">
          <Text variant="body" color="muted">
            {editingDuty
              ? "Update duty configuration"
              : "Configure a new duty with capabilities and privileges"}
          </Text>

          {/* Duty Name */}
          <div>
            <Text variant="body" weight="medium" className="mb-2">
              Duty Name *
            </Text>
            <Input
              value={formData.dutyName}
              onChange={(e) => handleInputChange("dutyName", e.target.value)}
              placeholder="e.g., Manage_Customer_Data"
              error={!!errors.dutyName}
            />
            {errors.dutyName && (
              <Text variant="caption" color="error" className="mt-1">
                {errors.dutyName}
              </Text>
            )}
          </div>

          {/* Tabs */}
          <Tabs
            activeTab={activeTab}
            onTabChange={setActiveTab}
            tabs={[
              { id: "capabilities", label: "Capabilities" },
              { id: "privileges", label: "Privileges" },
            ]}
          />

          {/* Tab Content */}
          {activeTab === "capabilities" && (
            <div className="space-y-4">
              <Text variant="body" weight="medium">
                Entity Capabilities Configuration
              </Text>
              <Text variant="caption" color="muted">
                Enable/disable workflow entry points for each entity
              </Text>

              <div className="border border-gray-200 rounded-lg overflow-hidden">
                <Table>
                  <Table.Header>
                    <Table.Row>
                      <Table.HeaderCell>Entity</Table.HeaderCell>
                      <Table.HeaderCell>New</Table.HeaderCell>
                      <Table.HeaderCell>Copy</Table.HeaderCell>
                      <Table.HeaderCell>Use-match</Table.HeaderCell>
                    </Table.Row>
                  </Table.Header>
                  <Table.Body>
                    {ENTITIES_CAPABILITIES.map((entityConfig) => (
                      <Table.Row key={entityConfig.entity}>
                        <Table.Cell>
                          <Text variant="body" weight="medium">
                            {entityConfig.entity}
                          </Text>
                        </Table.Cell>
                        <Table.Cell>
                          <Checkbox
                            checked={
                              formData.capabilities[entityConfig.entity]?.new ||
                              false
                            }
                            onChange={(checked) =>
                              handleCapabilityChange(
                                entityConfig.entity,
                                "new",
                                checked
                              )
                            }
                          />
                        </Table.Cell>
                        <Table.Cell>
                          <Checkbox
                            checked={
                              formData.capabilities[entityConfig.entity]
                                ?.copy || false
                            }
                            onChange={(checked) =>
                              handleCapabilityChange(
                                entityConfig.entity,
                                "copy",
                                checked
                              )
                            }
                          />
                        </Table.Cell>
                        <Table.Cell>
                          <Checkbox
                            checked={
                              formData.capabilities[entityConfig.entity]
                                ?.useMatch || false
                            }
                            onChange={(checked) =>
                              handleCapabilityChange(
                                entityConfig.entity,
                                "useMatch",
                                checked
                              )
                            }
                          />
                        </Table.Cell>
                      </Table.Row>
                    ))}
                  </Table.Body>
                </Table>
              </div>
            </div>
          )}

          {activeTab === "privileges" && (
            <div className="space-y-4">
              <div>
                <Text variant="body" weight="medium" className="mb-2">
                  Privileges *
                </Text>
                <MultiSelect
                  options={AVAILABLE_PRIVILEGES}
                  value={formData.privileges}
                  onChange={(value) => handleInputChange("privileges", value)}
                  placeholder="Select privileges to group..."
                  error={!!errors.privileges}
                />
                {errors.privileges && (
                  <Text variant="caption" color="error" className="mt-1">
                    {errors.privileges}
                  </Text>
                )}
                <Text variant="caption" color="muted" className="mt-1">
                  Select multiple privileges to group them into this duty
                </Text>
              </div>

              {/* Selected Privileges Preview */}
              {formData.privileges && formData.privileges.length > 0 && (
                <div className="border border-gray-200 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-3">
                    <Text variant="body" weight="medium">
                      Selected Privileges ({formData.privileges.length})
                    </Text>
                    <Button
                      variant="outline"
                      size="small"
                      onClick={() => setShowPreviewModal(true)}
                    >
                      <Eye size={16} className="mr-1" />
                      Preview Effective Access
                    </Button>
                  </div>
                  <div className="space-y-2">
                    {formData.privileges.map((privilegeValue) => {
                      const privilege = AVAILABLE_PRIVILEGES.find(
                        (p) => p.value === privilegeValue
                      );
                      return (
                        <div
                          key={privilegeValue}
                          className="flex items-center justify-between p-2 bg-gray-50 rounded"
                        >
                          <div>
                            <Text
                              variant="body"
                              weight="medium"
                              className="text-sm"
                            >
                              {privilege?.privilegeName || privilegeValue}
                            </Text>
                            <Text variant="caption" color="muted">
                              {privilege?.entity} •{" "}
                              {Object.entries(
                                privilege?.sessionFieldLevels || {}
                              )
                                .map(([session, fields]) =>
                                  Object.entries(fields)
                                    .filter(
                                      ([field, level]) => level !== "None"
                                    )
                                    .map(
                                      ([field, level]) =>
                                        `${session}-${field}: ${level}`
                                    )
                                    .join(", ")
                                )
                                .filter(Boolean)
                                .join("; ")}
                            </Text>
                          </div>
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            {privilege?.entity}
                          </span>
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Modal Actions */}
          <div className="flex justify-between gap-3 mt-6">
            <div>
              {activeTab === "privileges" && formData.privileges.length > 0 && (
                <Button variant="outline" onClick={handleValidate}>
                  Validate Conflicts
                </Button>
              )}
            </div>
            <div className="flex gap-3">
              <Button variant="outline" onClick={() => setShowAddModal(false)}>
                Cancel
              </Button>
              <Button onClick={handleSubmit}>
                {editingDuty ? "Save Changes" : "Save Duty"}
              </Button>
            </div>
          </div>
        </div>
      </Modal>

      {/* Validation Modal */}
      <Modal
        isOpen={showValidateModal}
        onClose={() => setShowValidateModal(false)}
        title="Duties Validation Result"
        size="medium"
      >
        <div className="space-y-6">
          <div className="flex items-center gap-3">
            <CheckCircle
              size={24}
              className={
                validationResult?.isValid ? "text-green-600" : "text-red-600"
              }
            />
            <Text variant="body" weight="medium">
              {validationResult?.message}
            </Text>
          </div>

          {validationResult && !validationResult.isValid && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <Text
                variant="body"
                weight="medium"
                className="text-red-800 mb-3"
              >
                Conflicts Detected:
              </Text>
              <div className="space-y-4">
                {validationResult.conflicts.map((conflict, index) => (
                  <div
                    key={index}
                    className="bg-white border border-red-300 rounded-lg p-3"
                  >
                    <Text
                      variant="body"
                      weight="medium"
                      className="text-red-800 mb-2"
                    >
                      {conflict.message}
                    </Text>
                    <div className="bg-red-100 rounded p-2">
                      <Text
                        variant="caption"
                        className="text-red-700 whitespace-pre-line"
                      >
                        {conflict.detail}
                      </Text>
                    </div>
                    <div className="mt-2 flex items-center gap-2">
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-200 text-red-800">
                        {conflict.entity}
                      </span>
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-200 text-blue-800">
                        {conflict.session}
                      </span>
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-200 text-gray-800">
                        {conflict.field}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {validationResult && validationResult.isValid && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <Text variant="body" className="text-green-800">
                All selected privileges are compatible and can be grouped
                together safely.
              </Text>
            </div>
          )}

          <div className="flex justify-end">
            <Button
              variant="outline"
              onClick={() => setShowValidateModal(false)}
            >
              Close
            </Button>
          </div>
        </div>
      </Modal>

      {/* Preview Effective Access Modal */}
      <Modal
        isOpen={showPreviewModal}
        onClose={() => setShowPreviewModal(false)}
        title="Effective Field Access Preview"
        size="large"
      >
        <div className="space-y-6">
          <Text variant="body" color="muted">
            This shows the combined field access levels after merging all
            selected privileges
          </Text>

          {Object.keys(getEffectiveFieldAccess()).length === 0 ? (
            <div className="text-center py-8">
              <Text variant="body" color="muted">
                No effective field access. Please select privileges first.
              </Text>
            </div>
          ) : (
            Object.entries(getEffectiveFieldAccess()).map(
              ([entity, sessions]) => (
                <div
                  key={entity}
                  className="border border-gray-200 rounded-lg p-4"
                >
                  <Text
                    variant="body"
                    weight="medium"
                    className="mb-3 text-blue-700"
                  >
                    {entity} Entity
                  </Text>

                  {Object.entries(sessions).map(([session, fields]) => (
                    <div key={session} className="mb-4 last:mb-0">
                      <Text
                        variant="body"
                        weight="medium"
                        className="mb-2 text-gray-700"
                      >
                        {session} Session
                      </Text>
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
                        {Object.entries(fields).map(([field, level]) => (
                          <div
                            key={field}
                            className="flex items-center justify-between p-2 bg-gray-50 rounded"
                          >
                            <Text variant="caption" className="text-sm">
                              {field}
                            </Text>
                            <span
                              className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                                level === "Edit"
                                  ? "bg-green-100 text-green-800"
                                  : "bg-blue-100 text-blue-800"
                              }`}
                            >
                              {level}
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  ))}
                </div>
              )
            )
          )}

          <div className="flex justify-end">
            <Button
              variant="outline"
              onClick={() => setShowPreviewModal(false)}
            >
              Close
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default DutiesConfig;
